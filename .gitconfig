[alias]
	# long and descriptive name for removing branch
	delete-remote-branch = push origin --delete

	# undo last commit
	undo-commit = reset --soft HEAD^

	# mirror svn command
	st = status

	# mirror svn command
	df = diff

	# only show staged diff
	dc = diff --cached

	# graphing for when you are a bit lost
	graph = log --graph --full-history --all --color --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s";

	# `git since 2` will show commits from the past two days
	since = !sh -c 'today=$(date +"%Y-%m-%d") && earlier=$(date -v-${1}d +"%Y-%m-%d") && echo "log --since=$earlier --until=$today" && git log --since=$earlier --until=$today' $1

	# Shows your commits from the last workday to today
	standup = !sh -c 'days=$([ $(date +%w) == 1 ] && echo 3 || echo 1) && lasttime=$(date -v-${days}d +"%Y-%m-%d") && git log --since=$lasttime --author=$(git config user.email) --pretty=oneline --all'

	# Clone a repository including all submodules
	c = clone --recursive

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v

	# git completion is bad for this one
	co = checkout

	# setup a branch
	cb = "!git checkout -b \"$1\" && git branch --set-upstream-to=\"origin/$1\" \"$1\" #"

	ls = ls-files

	a = add -u

	u = push -u

	p = pull

	b = checkout -b

	cm = commit
[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore.global
	attributesfile = ~/.gitattributes

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

	quotepath = false

[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = cyan bold # line info
	old = magenta # deletions
	new = green # additions

[color "status"]
	added = green
	changed = yellow
	untracked = cyan

[diff]
	# Detect copies as well as renames
	renames = copies
	wsErrorHighlight = new,old

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]
	# Use the Git 1.x.x default to avoid errors on machines with old Git
	# installations. To use `simple` instead, add this to your `~/.extra` file:
	# `git config --global push.default simple`. See http://git.io/mMah-w.
	default = current
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[pull]
	ff = only

# https://calebhearth.com/sign-git-with-ssh
[gpg]
	format = ssh

[gpg "ssh"]
	allowedSignersFile = ~/.ssh/allowed_signers

[include]
	path = .gitconfig.user

# example content of .gitconfig.user
# [user]
# 	name = Name nameson
# 	email = name@family.me
# 	signingkey = ssh-rsa some-key
# [commit]
# 	gpgsign = true
# [includeIf "gitdir:~/repos/company/"]
#     path = ~/.gitconfig.work

# example content of .gitconfig.work
# [user]
# 	name = Name nameson
# 	email = name@company.com
# 	signingkey = ssh-rsa some-other-key
